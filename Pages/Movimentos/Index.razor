@page "/movimentos"
@inject AMUTRANSPORTESService service
@inject DialogService dialog
@inject NotificationService notification
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>@title</PageTitle>

<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenText Text="@title" TextStyle="TextStyle.H5" TagName="TagName.H5" style="margin: 0" />
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="Nova" Click="@AddButtonClick" Variant="Variant.Flat" />
                @if (selectedEntities is not null && selectedEntities?.Count > 0)
                {
                    <RadzenButton Icon="delete" Text="@deleteText" Click="@DeleteSelectedEntities" Variant="Variant.Flat" ButtonStyle="ButtonStyle.Danger" Size="Radzen.ButtonSize.Small" />
                }
                @if (entities is not null && entities.Count() > 0)
                {
                    <RadzenButton ButtonStyle="ButtonStyle.Info" Text="Exportar" Value="xlsx" Icon="border_all" Click="@ExportClick" Size="Radzen.ButtonSize.Small" />
                }
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenTextBox Placeholder="Pesquisar ..." style="display: block; width: 100%" @oninput="@Search" />
    <RadzenRow>
        <RadzenColumn SizeMD=12>
            <RadzenDataGrid @ref="grid"
                            AllowFiltering="true"
                            FilterMode="FilterMode.Advanced"
                            AllowPaging="true"
                            AllowSorting="true"
                            AllowRowSelectOnRowClick="@allowRowSelectOnRowClick"
                            ShowPagingSummary="true"
                            PageSize="10"
                            PageSizeOptions=@(new int[]{5, 10, 20, 30})
                            Data="@entities"
                            TItem="Movimento"
                            SelectionMode="DataGridSelectionMode.Multiple"
                            @bind-Value="@selectedEntities" EmptyText="Nenhum registo  encontrado ">
                <Columns>
                    <RadzenDataGridColumn TItem="Movimento" Width="60px" Sortable="false" Filterable="false">
                        <HeaderTemplate>
                            <RadzenCheckBox TriState="false"
                                            TValue="bool"
                                            Value="@(entities.Any(i => selectedEntities != null && selectedEntities.Contains(i)))"
                                            Change="@(args => selectedEntities = args ? entities?.ToList() : null)" />
                        </HeaderTemplate>
                        <Template Context="data">
                            <RadzenCheckBox TriState="false"
                                            Value="@(selectedEntities != null && selectedEntities.Contains(data))"
                                            TValue="bool"
                                            Change=@(args => { if(!allowRowSelectOnRowClick) { grid.SelectRow(data); }}) />
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Movimento"
                                          Property="DataEntrada"
                                          Title="Data Entrada"
                                          Frozen="true" />

                    <RadzenDataGridColumn TItem="Movimento"
                                          Property="Assunto"
                                          Title="Assunto"
                                          Frozen="true" />

                    <RadzenDataGridColumn TItem="Movimento"
                                          Property="Proveniencia"
                                          Title="Proveniencia"
                                          Frozen="true" />

                    <RadzenDataGridColumn TItem="Movimento" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center" Title="Editar">
                        <Template Context="entity">

                            <RadzenButton ButtonStyle="ButtonStyle.Warning"
                                          Icon="edit" Size="ButtonSize.Medium"
                                          Shade="Shade.Lighter"
                                          Variant="Variant.Flat"
                                          Click=@(args => EditButtonClick(args, entity)) @onclick:stopPropagation="true" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Movimento" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center" Title="Deletar">
                        <Template Context="entity">

                            <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                          Icon="delete" Size="ButtonSize.Medium"
                                          Shade="Shade.Lighter"
                                          Variant="Variant.Flat"
                                          Click=@(args => DeleteButtonClick(args, entity)) @onclick:stopPropagation="true" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {
    string title = "Movintos de Documentos no Gabinete";
    IEnumerable<Movimento> entities;
    IList<Movimento> selectedEntities;
    RadzenDataGrid<Movimento> grid;
    bool allowRowSelectOnRowClick = false;
    string search = "";
    string deleteText => $"Deletar {selectedEntities?.Count} itens selecionados";

    protected override async Task OnInitializedAsync() => await LoadEntities();

    async Task LoadEntities() =>
        entities = await service.GetMovimentos(new Query { Filter = $@"i => i.Assunto.Contains(@0)", FilterParameters = new object[] { search } });

    async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";
        entities = await service.GetMovimentos(new Query { Filter = $@"i => i.Assunto.Contains(@0)", FilterParameters = new object[] { search } });
    }

    async Task AddButtonClick()
    {
        await dialog.OpenAsync<CreateUpdate>("Nova Entrada", null, new DialogOptions() { Width = "750px" });
        await grid.Reload();
    }

    async Task EditButtonClick(MouseEventArgs args, Movimento entity)
    {
        await dialog.OpenAsync<CreateUpdate>("Editar Entrada",
        new Dictionary<string, object> { { "IdEntity", entity.Id } },
        new DialogOptions() { Width = "750px" });
        await grid.Reload();
    }

    async Task DeleteButtonClick(MouseEventArgs args, Movimento entity)
    {
        if (await dialog.Confirm("Tens a certeza que pretendes remover esse registro?", "Deletar") == true)
        {
            var deleteResult = await service.DeleteMovimento(entity.Id);

            if (deleteResult != null)
            {
                await grid.Reload();
            }
        }
    }

    async Task DeleteSelectedEntities()
    {
        int count = 0;
        if (await dialog.Confirm("Ao clicar em OK, os registros selecionados serao removidos da Base de Dados.", "Deletar") == true)
        {
            foreach (var item in selectedEntities!)
            {
                var res = await service.DeleteMovimento(item.Id);
                if (res is not null) ++count;
            }
            notification.Notify(NotificationSeverity.Success, "Sucesso", $"{count} Registros deletados com sucesso!");
            selectedEntities = null;
            await grid.Reload();
        }
    }

    async Task ExportClick()
    {
        await service.ExportMovimentosToExcel(new Query
            {
                Filter = $@"{(string.IsNullOrEmpty(grid.Query.Filter) ? "true" : grid.Query.Filter)}",
                OrderBy = $"{grid.Query.OrderBy}",
                Select = string.Join(",", grid.ColumnsCollection.Where(c => c.GetVisible() && !string.IsNullOrEmpty(c.Property)).Select(c => c.Property.Contains(".") ? c.Property + " as " + c.Property.Replace(".", "") : c.Property))
            }, "Movimentos");
    }
}
