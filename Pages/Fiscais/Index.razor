@page "/fiscais"
@inject AMUTRANSPORTESService service
@inject DialogService dialog
@inject NotificationService notification
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>@title</PageTitle>

<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
            <RadzenText Text="@title" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="Cadastrar" Click="@AddButtonClick" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                @if (selectedEntities is not null && selectedEntities?.Count > 0)
                {
                    <RadzenButton Icon="delete" Text="@deleteText" Click="@DeleteSelectedEntities" Variant="Variant.Flat" ButtonStyle="ButtonStyle.Danger" Size="Radzen.ButtonSize.Small" />
                }
                @if (entities is not null && entities.Count() > 0)
                {
                    <RadzenButton ButtonStyle="ButtonStyle.Info" Text="Exportar" Value="xlsx" Icon="border_all" Click="@ExportClick" Size="Radzen.ButtonSize.Small" />
                }
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenTextBox Placeholder="Pesquisar ..." style="display: block; width: 100%" @oninput="@Search" />
    <RadzenRow>
        <RadzenColumn SizeMD=12>
            <RadzenDataGrid @ref="grid"
                            AllowFiltering="true"
                            FilterMode="FilterMode.Advanced"
                            AllowPaging="true"
                            AllowSorting="true"
                            AllowRowSelectOnRowClick="@allowRowSelectOnRowClick"
                            ShowPagingSummary="true"
                            PageSize="10"
                            PageSizeOptions=@(new int[]{5, 10, 20, 30})
                            Data="@entities"
                            TItem="Fiscal"
                            SelectionMode="DataGridSelectionMode.Multiple"
                            @bind-Value="@selectedEntities" PagingSummaryFormat="Página {0} de {1} - Total {2} registros" PageSizeText="Registros por pagina" EmptyText="Nenhum registo  encontrado ">
                <Columns>
                    <RadzenDataGridColumn TItem="Fiscal" Width="60px" Sortable="false" Filterable="false">
                        <HeaderTemplate>
                            <RadzenCheckBox TriState="false"
                                            TValue="bool"
                                            Value="@(entities.Any(i => selectedEntities != null && selectedEntities.Contains(i)))"
                                            Change="@(args => selectedEntities = args ? entities?.ToList() : null)" />
                        </HeaderTemplate>
                        <Template Context="data">
                            <RadzenCheckBox TriState="false"
                                            Value="@(selectedEntities != null && selectedEntities.Contains(data))"
                                            TValue="bool"
                                            Change=@(args => { if(!allowRowSelectOnRowClick) { grid.SelectRow(data); }}) />
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="Fiscal"
                                          Property="Nome"
                                          Title="Nome"
                                          Frozen="true" />

                    <RadzenDataGridColumn TItem="Fiscal"
                                          Property="BI"
                                          Title="BI"
                                          Frozen="true" />

                    <RadzenDataGridColumn TItem="Fiscal"
                                          Property="Funcao"
                                          Title="Função"
                                          Frozen="true" />                                          

                    <RadzenDataGridColumn TItem="Fiscal"
                                          Property="Paragem.Nome"
                                          Title="Paragem"
                                          Frozen="true" />
                                          
                    <RadzenDataGridColumn TItem="Fiscal"
                                          Property="Telefone"
                                          Title="Telefone"
                                          Frozen="true" />

                    <RadzenDataGridColumn TItem="Fiscal" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center" Title="Editar">
                        <Template Context="entity">

                            <RadzenButton ButtonStyle="ButtonStyle.Warning"
                                          Icon="edit" Size="ButtonSize.Medium"
                                          Shade="Shade.Lighter"
                                          Variant="Variant.Flat"
                                          Click=@(args => EditButtonClick(args, entity)) @onclick:stopPropagation="true" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Fiscal" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center" Title="Deletar">
                                            <Template Context="entity">
                    
                                                <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                                              Icon="delete" Size="ButtonSize.Medium"
                                                              Shade="Shade.Lighter"
                                                              Variant="Variant.Flat"
                                                              Click=@(args => DeleteButtonClick(args, entity)) @onclick:stopPropagation="true" />
                                            </Template>
                                        </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {
    private string title = "Fiscais";
    IEnumerable<Fiscal> entities;
    IList<Fiscal> selectedEntities;
    RadzenDataGrid<Fiscal> grid;
    bool allowRowSelectOnRowClick = false;
    string search="";
    string deleteText => $"Deletar {selectedEntities?.Count} itens selecionados";

    protected override async Task OnInitializedAsync() => await LoadEntities();

    async Task LoadEntities() => 
        entities = await service.GetFiscals(new Query { Filter = $@"i => i.Nome.Contains(@0) || i.BI.Contains(@0)", FilterParameters = new object[] { search }});

    async Task Search(ChangeEventArgs args)
    {
        search = $"{args.Value}";
        entities = await service.GetFiscals(new Query { Filter = $@"i => i.Nome.Contains(@0) || i.BI.Contains(@0)", FilterParameters = new object[] { search }});
    }

    async Task AddButtonClick()
    {
        await dialog.OpenAsync<CreateUpdate>("Novo Fiscal", null, new DialogOptions() { Width = "750px", Resizable = true });
        await grid.Reload();
    }

    async Task EditButtonClick(MouseEventArgs args, Fiscal entity)
    {
        await dialog.OpenAsync<CreateUpdate>("Editar Fiscal",
        new Dictionary<string, object> { { "IdEntity", entity.Id } },
        new DialogOptions() { Width = "750px" });
        await grid.Reload();
    }

    async Task DeleteButtonClick(MouseEventArgs args, Fiscal entity)
    {
        if (await dialog.Confirm("Tens a certeza que pretendes excluir esse registro?","Excluir Registro") == true)
                {
                    var deleteResult = await service.DeleteFiscal(entity.Id);

                    if (deleteResult != null)
                    {
                        await grid.Reload();
                    }
                }
    }

    async Task DeleteSelectedEntities()
    {
        int count = 0;
        if (await dialog.Confirm("Ao clicar em OK, os registros selecionados serao excluidos.", "Excluir Registro") == true)
        {
            foreach (var item in selectedEntities!)
            {
                var res = await service.DeleteFiscal(item.Id);
                if (res is not null) ++count;
            }
            notification.Notify(NotificationSeverity.Success, "Sucesso", $"{count} Registros deletados com sucesso!");
            selectedEntities = null;
            await grid.Reload();
        }
    }

    async Task ExportClick()
    {
        await service.ExportFiscalsToExcel(new Query
                {
                    Filter = $@"{(string.IsNullOrEmpty(grid.Query.Filter) ? "true" : grid.Query.Filter)}",
                    OrderBy = $"{grid.Query.OrderBy}",
                    Select = string.Join(",", grid.ColumnsCollection.Where(c => c.GetVisible() && !string.IsNullOrEmpty(c.Property)).Select(c => c.Property.Contains(".") ? c.Property + " as " + c.Property.Replace(".", "") : c.Property))
                }, title);
    }
}
